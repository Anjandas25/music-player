{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anjan\\\\Desktop\\\\DEV ED React Projects\\\\music-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Song from './components/Song';\nimport app from './styles/app.scss';\nimport Player from './components/Player';\nimport Library from './components/Library';\nimport data from './util';\nimport LibrarySong from './components/LibrarySong';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //Using useRef\n\n  const audioRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      currentSong: currentSong,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"iN+lkj4FIn8PEr/FblQZSrg2uN8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Anjan/Desktop/DEV ED React Projects/music-player/src/App.js"],"names":["React","useState","useRef","Song","app","Player","Library","data","LibrarySong","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","audioRef","timeUpdateHandler","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,QAAsC,OAAtC;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACM,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAN,CAA9C;AAEA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CAJgB,CAMd;;AACA,QAAMe,QAAQ,GAAGd,MAAM,CAAC,IAAD,CAAvB;AAEF,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEU;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEI,QAAlB;AAA4B,MAAA,WAAW,EAAEJ,WAAzC;AAAsD,MAAA,SAAS,EAAEE,SAAjE;AAA4E,MAAA,YAAY,EAAEC;AAA1F;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEL,KAAhB;AAAuB,MAAA,cAAc,EAAEG;AAAvC;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAO,MAAA,gBAAgB,EAAEI,iBAAzB;AAA4C,MAAA,YAAY,EAAEA,iBAA1D;AAA6E,MAAA,GAAG,EAAED,QAAlF;AAA4F,MAAA,GAAG,EAAIJ,WAAW,CAACM;AAA/G;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjBD;;GAAMT,G;;KAAAA,G;AAmBN,eAAeA,GAAf","sourcesContent":["import React, {useState, useRef} from 'react';\n\nimport Song from './components/Song';\n\nimport app from './styles/app.scss';\n\nimport Player from './components/Player';\n\nimport Library from './components/Library';\n\nimport data from './util';\nimport LibrarySong from './components/LibrarySong';\n\nconst App = () => {\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0])\n  \n  const [isPlaying, setIsPlaying] = useState(false)\n\n    //Using useRef\n    const audioRef = useRef(null);\n\n  return (\n    <div>\n      <Song currentSong={currentSong}/>\n      <Player audioRef={audioRef} currentSong={currentSong} isPlaying={isPlaying} setIsPlaying={setIsPlaying}/>\n      <Library songs={songs} setCurrentSong={setCurrentSong}/>\n      <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src = {currentSong.audio}></audio>\n    </div>\n  )\n}\n\nexport default App; \n"]},"metadata":{},"sourceType":"module"}